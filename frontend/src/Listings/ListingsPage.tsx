import React, {useEffect, useRef, useState} from 'react';
import {Link, useNavigate} from "react-router-dom";
import NavBar from "../SharedComponents/NavBar";
import {getAuth, onAuthStateChanged} from "firebase/auth";
import {ListingData} from "../SharedComponents/Listing";
import { getDatabase, ref, set, push} from "firebase/database";


interface ListingsPageProps {
    // isLoggedIn: boolean
}

function ListingsPage(props: ListingsPageProps) {

    const auth = getAuth()
    // redirect to login page if user is not already logged in
    let navigateTo = useNavigate()
    const loadedUserID = useRef(false)
    const [userID, setUserID] = useState<string>("")
    useEffect(()=> {
        onAuthStateChanged(auth, (user) => {
            if (!loadedUserID.current) {
                if (!user) {
                    navigateTo("/login")
                } else {
                    console.log("onauthstatechanged")

                    console.log(" setting user id")
                    setUserID(user.uid)
                    // update ref so that further interactions with page don't trigger hook
                    loadedUserID.current = true
                }
            }
        })
    }, [])

    const [emptyListingsData, setEmptyListingsData] = useState({});
    const [newListingID, setNewListingID] = useState("");

    const uploadNewEmptyListing = () => {
        const emptyListingsData: ListingData = {
            address: "",
            area: "",
            date_start: "",
            date_end: "",
            price: "",
            owner_id: userID,
            user_id: "JvjxzxMRZ8cTeKOopsGxufsgRsk1",
            completed: false
        }

        // fetch from DB and set state to be sent to OwnerView (including UNIQUE id of the new listing)
        const db = getDatabase()
        const listingsRef = ref(db, "products")
        // Generate a reference to a new location and add some data using push()
        const newPostRef = push(listingsRef, emptyListingsData)
        const listingID = newPostRef.key

        console.log("new listing id: " + listingID)
        // Get the unique key generated by push()
        setEmptyListingsData(emptyListingsData)
        console.log(emptyListingsData)
        console.log(listingID)
        if (listingID !== null) {
            setNewListingID(listingID)
        }
    }

    /* When new listing btn is clicked, upload a new empty listing and pass it to the OwnerView page for modification*/
    const handleOnClickNewListing = () => {
        if (userID !== "") {
            console.log("uploading new listing")
            uploadNewEmptyListing()
        }
    }


    useEffect(() => {
        if (Object.keys(emptyListingsData).length > 0) {
            navigateTo("/createlisting", {state: {listingID: newListingID, listingData: emptyListingsData}})
        }
    }, [emptyListingsData]);



    // TODO: new listing btn to make empty template on db and redirect to owner view w props
    // TODO: iterate over all listings and separate into claimed, unclaimed, completed. Then map to <Listing>
    return (
        <div>
            <NavBar />
            <div className="listings-page">
                Listings Page

                <div className="new-listing-btn" onClick={handleOnClickNewListing}>
                        Post a new Listing

                </div>

                <div className="claimed-listings-wrapper">
                    <h3>Claimed</h3>
                </div>
                <div className="unclaimed-listings-wrapper">
                    <h3>Unclaimed</h3>
                </div>
                <div className="completed-listings-wrapper">
                    <h3>Completed</h3>
                </div>
            </div>
        </div>
        );
}

export default ListingsPage;