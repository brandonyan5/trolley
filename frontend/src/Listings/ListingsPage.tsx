import React, {useEffect, useRef, useState} from 'react';
import {Link, useNavigate} from "react-router-dom";
import NavBar from "../SharedComponents/NavBar";
import {getAuth, onAuthStateChanged} from "firebase/auth";
import Listing, {ListingData} from "../SharedComponents/Listing";
import {getDatabase, ref, set, push, onValue} from "firebase/database";
import {ListingsData} from "../Marketplace/Marketplace";
import './ListingsPage.css'

interface ListingsPageProps {
}

function ListingsPage(props: ListingsPageProps) {

    /* AUTH CHECKING */
    const auth = getAuth()
    // redirect to login page if user is not already logged in
    let navigateTo = useNavigate()
    const loadedUserID = useRef(false)
    const [ownerID, setOwnerID] = useState<string>("")
    const [ownerEmail, setOwnerEmail] = useState<string>("");

    useEffect(()=> {
        onAuthStateChanged(auth, (user) => {
            if (!loadedUserID.current) {
                if (!user) {
                    navigateTo("/login")
                } else {
                    console.log("onauthstatechanged")
                    console.log("user id: " + user.uid)
                    setOwnerID(user.uid)
                    setOwnerEmail(user.email!)

                    // update ref so that further interactions with page don't trigger hook
                    loadedUserID.current = true
                }
            }
        })
    }, [])

    /* STATE HOOKS */
    // store ALL listings data (to be separated into claimed, unclaimed, completed)
    const [allListingsData, setAllListingsData] = useState<ListingsData>({});
    // three sub-categories for listings
    const [claimedListings, setClaimedListings] = useState<ListingsData>({});
    const [unclaimedListings, setUnclaimedListings] = useState<ListingsData>({});
    const [completedListings, setCompletedListings] = useState<ListingsData>({});
    // template listing data
    const [emptyListingData, setEmptyListingData] = useState({});
    // unique ID of new template listing
    const [newListingID, setNewListingID] = useState("");

    const uploadNewEmptyListing = () => {
        const emptyListingsData: ListingData = {
            address: "",
            area: "",
            date_start: "",
            date_end: "",
            price: "",
            owner_id: ownerID,
            user_id: "", //TODO: make empty initially (bc no users have claimed it)
            completed: false
        }

        // fetch from DB and set state to be sent to OwnerView (including UNIQUE id of the new listing)
        const db = getDatabase()
        const listingsRef = ref(db, "products")
        // Generate a reference to a new location and add some data using push()
        const newPostRef = push(listingsRef, emptyListingsData)
        const listingID = newPostRef.key

        console.log("new listing id: " + listingID)
        // Get the unique key generated by push()
        setEmptyListingData(emptyListingsData)
        console.log(emptyListingsData)
        console.log(listingID)
        if (listingID !== null) {
            setNewListingID(listingID)
        }
    }

    /* retrieves ALL listing data from the DB owned by the current user (with a listener attached) and updates state */
    const getAllListingsOwnedByUser = () => {
        console.log("== GETTING ALL LISTINGS OWNED BY USER ==")
        // get reference to db
        const db = getDatabase()
        // get reference to node we want to read
        const listingsRef = ref(db, "products")
        // fetch and track "products" JSON object
        onValue(listingsRef, (dataSnapshot) => {
            const allDBListings: ListingsData = dataSnapshot.val()
            // only store current user's listings
            const myListings: ListingsData = {}

            Object.keys(allDBListings).map(listingID => {
                const currListing = allDBListings[listingID]
                console.log("using uid for owner: " + ownerID)
                console.log("curr listing: ")
                console.log(currListing)
                // only get listings owned by user
                if (currListing.owner_id === ownerID) {
                    myListings[listingID] = allDBListings[listingID]
                }
            })

            console.log("ALL fetched data:")
            console.log(allDBListings)
            console.log("My listings only:")
            console.log(myListings)
            setAllListingsData(myListings)
        })
    }

    /* separate the listings into claimed, unclaimed, and completed */
    const separateListings = () => {
        // initialize subsets of listings to be populated
        const unclaimed: ListingsData = {}
        const claimed: ListingsData = {}
        const completed: ListingsData = {}

        // iterate over all listings
        Object.keys(allListingsData).map(listingID => {
            const currListing = allListingsData[listingID]
            if (currListing["user_id"] === "") {
                // get unclaimed listings (listings with empty "user_id" field)
                unclaimed[listingID] = currListing
            } else {
                if (allListingsData[listingID]["completed"]) {
                    // get completed listings (listings with non-empty "user_id" field AND containing "true" in "completed" field)
                    completed[listingID] = currListing
                } else {
                    // get claimed listings (listings with non-empty "user_id" field AND not completed)
                    claimed[listingID] = currListing
                }
            }
        })

        console.log("=========")
        console.log("unclaimed")
        console.log(unclaimed)
        console.log("claimed")
        console.log(claimed)
        console.log("completed")
        console.log(completed)

        // update state
        setUnclaimedListings(unclaimed)
        setClaimedListings(claimed)
        setCompletedListings(completed)

    }

    /* When new listing btn is clicked, upload a new empty listing and pass it to the OwnerView page for modification*/
    const handlePostNewListing = () => {
        if (ownerID !== "") {
            console.log("uploading new listing")
            // uploadNewEmptyListing()
        }
    }


    // initially fetch all listings from DB
    useEffect(() => {
        if (ownerID !== "") {
            console.log("getting initial listings")
            getAllListingsOwnedByUser()
        }
    }, [ownerID])

    // // redirect to Owner View with empty listing template for user to create a new listing
    // // only redirect when the template data is ready
    // useEffect(() => {
    //     if (Object.keys(emptyListingData).length > 0) {
    //         navigateTo("/createlisting", {state: {listingID: newListingID, listingData: emptyListingData}})
    //     }
    // }, [emptyListingData]);

    // separate the listings into claimed, unclaimed, and completed once all listings have been fetched
    useEffect(() => {
        if (Object.keys(allListingsData).length > 0) {
            console.log("separating listings")
            separateListings()
        }
    }, [allListingsData]);


    return (
        <div>
            <NavBar />
            <div className="listings-page">
                <h2>My Listings</h2>

                <Link to="/createlisting" state={{listingID: "invalid"}}>
                    <div className="new-listing-btn" onClick={handlePostNewListing}>
                        + Post a new listing
                    </div>
                </Link>


                <div className="claimed-listings-wrapper">
                    <h3>Claimed Listings</h3>
                    {
                        // render claimed listings (if any) else show generic message
                        Object.keys(claimedListings).length > 0 ?
                            Object.keys(claimedListings).map((listingID) =>
                                <Link key={listingID} to="/createlisting"  state={{listingID: listingID}}>
                                    <Listing
                                        key={listingID}
                                        listingID={listingID}
                                        data={claimedListings[listingID]}
                                        showClaimerBox={true}
                                        showAcceptDecline={true}
                                        ownerEmail={ownerEmail}
                                    />
                                </Link>
                            )
                        :
                        <h4>Nothing to show here</h4>
                    }
                </div>
                <div className="unclaimed-listings-wrapper">
                    <h3>Unclaimed Listings</h3>
                    {
                        // render unclaimed listings (if any) else show generic message
                        Object.keys(unclaimedListings).length > 0 ?
                            Object.keys(unclaimedListings).map((listingID) =>
                                <Link key={listingID} to="/createlisting"  state={{listingID: listingID}}>
                                    <Listing
                                        key={listingID}
                                        listingID={listingID}
                                        data={unclaimedListings[listingID]}
                                        showClaimerBox={false}
                                        showAcceptDecline={false}
                                    />
                                </Link>
                            )
                        :
                        <h4>Nothing to show here</h4>
                    }
                </div>
                <div className="completed-listings-wrapper">
                    <h3>Completed</h3>
                    {
                        // render completed listings (if any) else show generic message
                        Object.keys(completedListings).length > 0 ?
                            Object.keys(completedListings).map((listingID) =>
                                <Link key={listingID} to="/products"  state={{product:completedListings[listingID], listingName: listingID}}>
                                    <Listing
                                        key={listingID}
                                        listingID={listingID}
                                        data={completedListings[listingID]}
                                        showClaimerBox={true}
                                        showAcceptDecline={false}
                                    />
                                </Link>
                            )
                        :
                        <h4>Nothing to show here</h4>
                    }
                </div>
            </div>
        </div>
        );
}

export default ListingsPage;